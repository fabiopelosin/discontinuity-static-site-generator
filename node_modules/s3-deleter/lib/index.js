// Generated by CoffeeScript 1.6.3
(function() {
  var MAX_BATCH_SIZE, S3Deleter, Writable, async,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  async = require('async');

  Writable = require('stream').Writable;

  MAX_BATCH_SIZE = 1000;

  module.exports = S3Deleter = (function(_super) {
    __extends(S3Deleter, _super);

    function S3Deleter(client, options) {
      this._deleteBatch = __bind(this._deleteBatch, this);
      var _ref;
      this.client = client;
      this.deleteQueue = [];
      if (options == null) {
        options = {};
      }
      this.batchSize = (_ref = options.batchSize) != null ? _ref : MAX_BATCH_SIZE;
      if (this.batchSize > MAX_BATCH_SIZE) {
        throw Error("Not allowed to delete more than " + MAX_BATCH_SIZE + " items at once.");
      }
      options.objectMode = true;
      S3Deleter.__super__.constructor.call(this, options);
    }

    S3Deleter.prototype._write = function(file, enc, callback) {
      var deletions, key, n, _ref;
      if (file === null) {
        deletions = (function() {
          var _i, _ref, _results;
          _results = [];
          for (n = _i = 0, _ref = this.deleteQueue.length / this.batchSize; 0 <= _ref ? _i < _ref : _i > _ref; n = 0 <= _ref ? ++_i : --_i) {
            _results.push(this._deleteBatch);
          }
          return _results;
        }).call(this);
        return async.parallel(deletions, callback);
      }
      key = (_ref = file.Key) != null ? _ref : file;
      this.deleteQueue.push(key);
      if (this.deleteQueue.length < this.batchSize) {
        return callback();
      } else {
        return this._deleteBatch(callback);
      }
    };

    S3Deleter.prototype._deleteBatch = function(callback) {
      var toDelete;
      toDelete = this.deleteQueue.slice(0, this.batchSize);
      this.deleteQueue = this.deleteQueue.slice(this.batchSize);
      return this.client.deleteMultiple(toDelete, function(err) {
        return callback(err);
      });
    };

    S3Deleter.prototype.end = function() {
      var _this = this;
      return this.write(null, null, function(err) {
        if (err) {
          return _this.emit('error', err);
        }
        return S3Deleter.__super__.end.call(_this);
      });
    };

    return S3Deleter;

  })(Writable);

}).call(this);
